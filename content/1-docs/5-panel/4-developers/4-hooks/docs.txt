Title: Hooks

----

Description: Learn how to react to Panel events with custom hooks in order to extend its functionalities.

----

Text: 

(since: 2.1 label: Introduced in tag: p)

## Available hooks

Hook-ID | Passed Object
- | - 
panel.page.create | $page
panel.page.update | $page
panel.page.delete | $page
panel.page.sort | $page
panel.page.hide | $page
panel.page.move  | $page
panel.file.upload | $file
panel.file.replace | $file
panel.file.rename | $file
panel.file.update | $file
panel.file.sort | $file
panel.file.delete | $file
panel.user.create  | $user
panel.user.update  | $user
panel.user.delete | $user
panel.avatar.upload | $avatar
panel.avatar.delete | $avatar

Hooks are being triggered after the event is called in the panel.

## Registering a hook

A hook can be registered in a plugin file or in your `site/config/config.php`:

```php
kirby()->hook('panel.page.create', function($page) {
  // your hook code
});
```

A hook is not expected to return anything. You cannot control the user flow with hooks at this state. They are silently triggered. 


## Accessing panel, kirby, site and user in a hook callback

In a lot of use-cases it will be helpful or even necessary to access the kirby, panel, site and current user objects from within a hook callback. You can do that with the following methods: 

```php
$panel = panel();
$kirby = kirby();
$site  = site();
$user  = site()->user();
```
